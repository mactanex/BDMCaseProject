--@StepDefinition("schedule")
class ScheduleStepDefinitions
instance variables
    scheduler: SchedulerChange := new SchedulerChange();
types
operations
-- @Given("schedule","A job with a unique {int} and a required {string}, {int}, {int}, and {int} exists in the system.")
public Given_a_job_exists: nat * seq of char * nat * nat * nat ==> ()
Given_a_job_exists(id,skill,skilLevel,timeUnit, deadline) ==
(
    dcl job: JobChange := new JobChange(id,skill,skilLevel,timeUnit, deadline);
    scheduler.AddJob(job);
);

-- @Given("schedule","A employee is added to the system, with a unique {int} and a {string}, {int}, and {int} exists in the system.")
public Given_an_employee_exists: nat * seq of char * nat * nat ==> ()
Given_an_employee_exists(id,skill,skilLevel,timeUnit) ==
(
    dcl employee: EmployeeChange := new EmployeeChange(id, timeUnit);
    employee.AddSkill(skill,skilLevel);
    scheduler.AddEmployee(employee);
);

-- @When("schedule","The system creates a schedule.")
public When_the_system_creates_a_schedule: () ==> ()
When_the_system_creates_a_schedule() ==
(
    IO`println(scheduler.GetJobCatalogue());
    IO`println(scheduler.GetEmployeeCatalogue());
    scheduler.step();
    -- scheduler.CreateSchedule();
    IO`println(scheduler.GetSchedule());
    IO`println(scheduler.GetJobCatalogue());
);

-- @Then("schedule","The job is scheduled {string}.")
public Then_the_job_is_scheduled: seq of char ==> bool
Then_the_job_is_scheduled(result) == 
(
  return scheduler.ScheduleSatisfied() = result;
) post RESULT = true;

-- @Given("schedule","A set of {string}  exist in the system.")
public Given_a_set_jobs_exists: seq of char ==> ()
Given_a_set_jobs_exists(pJobs) ==
(
  AddJobs(pJobs);

);

-- @Given("schedule","A set of {string} exist in the system.")
public Given_a_set_employees_exists: seq of char ==> ()
Given_a_set_employees_exists(employees) ==
(
  AddEmployees(employees);
);

public AddJobs: seq of char ==> ()
AddJobs(stringArgument) ==
(
  
  dcl originalInput: seq of char := stringArgument;

  dcl AmountOfJobs: nat := len [x | x in seq originalInput & x = '}'];

  for i = 1 to AmountOfJobs do (
    dcl temp: seq of seq of char := ["","","","", ""];
    dcl ite: nat := 1;
    
    for j = 1 to convertToJobsHelper(originalInput, 1) do (
      
      if not(originalInput(j) = ',' or (originalInput(j) = '{') or (originalInput(j) = '}')) then (
        temp(ite) := temp(ite) ^ [originalInput(j)];
        );
      if (originalInput(j) = ',') then ite := ite + 1;
      
    );

    for k = 1 to convertToJobsHelper(originalInput, 2) do (

      if (tl originalInput <> []) then originalInput := tl originalInput;
    );
    scheduler.AddJob(new JobChange(convert2(temp(1)), temp(2), convert2(temp(3)), convert2(temp(4)), convert2(temp(5))));
  )
);

public AddEmployees: seq of char ==> ()
AddEmployees(stringArgument) ==
(
  dcl originalInput: seq of char := stringArgument;
  dcl AmountOfEmployees: nat := len [x | x in seq originalInput & x = '}'];

  for i = 1 to AmountOfEmployees do (
    dcl temp: seq of seq of char := ["","","",""];
    dcl ite: nat := 1;
    
    for j = 1 to convertToJobsHelper(originalInput, 1) do (
      
      if not(originalInput(j) = ',' or (originalInput(j) = '{') or (originalInput(j) = '}')) then (
        temp(ite) := temp(ite) ^ [originalInput(j)];
        );
      if (originalInput(j) = ',') then ite := ite + 1;
      
    );

    for k = 1 to convertToJobsHelper(originalInput, 2) do (

      if (tl originalInput <> []) then originalInput := tl originalInput;
    );
    scheduler.AddEmployee(CreateEmployeeHelper(temp(1),temp(2),temp(3),temp(4)));
  )
);


public CreateEmployeeHelper: seq of char * seq of char * seq of char * seq of char ==> EmployeeChange
CreateEmployeeHelper(str1,str2,str3,str4) == 
( 
  if(exists e in set scheduler.GetEmployeeCatalogue() & e.GetId() = convert2(str1)) then 
  (
    let employee in set scheduler.GetEmployeeCatalogue() be st employee.GetId() = convert2(str1) 
    in (
      scheduler.RemoveEmployee(employee);
      employee.AddSkill(str2,convert2(str3));
      return employee;
    )
  )
  else (
    dcl employee: EmployeeChange := new EmployeeChange(convert2(str1),convert2(str4));
    employee.AddSkill(str2,convert2(str3));
    return employee;
  )
);

--{1,Mechanical,3,5}
public convert: seq of char  ==> nat 
convert(input) ==
return convertStringToNumber2(input);

public convert2: seq of char  ==> nat 
convert2(input) ==
return convertStringToNumber3(input);

functions
convertStringToNumber: char -> nat
convertStringToNumber(input) ==
(
  let lastdigit:nat = cases input:
                  '0' -> 0,
                  '1' -> 1,
                  '2' -> 2,
                  '3' -> 3,
                  '4' -> 4,
                  '5' -> 5,
                  '6' -> 6,
                  '7' -> 7,
                  '8' -> 8,
                  '9' -> 9
                  end
  in 
    lastdigit
  
);
convertStringToNumber2: seq of (char) -> nat
convertStringToNumber2(input) ==
(
  let lastdigit:nat = cases input:
                  "0" -> 0,
                  "1" -> 1,
                  "2" -> 2,
                  "3" -> 3,
                  "4" -> 4,
                  "5" -> 5,
                  "6" -> 6,
                  "7" -> 7,
                  "8" -> 8,
                  "9" -> 9
                  end
  in 
    lastdigit
  
);

convertStringToNumber3: seq of (char) -> nat
convertStringToNumber3(input) ==
(

if len input < 2 
then 
  let lastdigit:nat = cases input:
                  "0" -> 0,
                  "1" -> 1,
                  "2" -> 2,
                  "3" -> 3,
                  "4" -> 4,
                  "5" -> 5,
                  "6" -> 6,
                  "7" -> 7,
                  "8" -> 8,
                  "9" -> 9
                  end
  in 
    lastdigit  
else
  10*convertStringToNumber(hd input) + convertStringToNumber3(tl input)
) measure len input;





convertToJobsHelper: seq of char * nat -> nat
convertToJobsHelper(stringArgument, iterator) ==
(
  if (hd stringArgument = '}' or len stringArgument < 1) then iterator 
  else convertToJobsHelper(tl stringArgument,iterator+1)
) measure len stringArgument;

end ScheduleStepDefinitions