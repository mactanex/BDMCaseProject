/* class Scheduler

types


instance variables
    jobCatalogue: set of Job := {};
    employeeCatalogue: set of Employee := {};
    scheduleGLobal: map nat to (map Employee to Job) := {|->};

operations

public CreateSchedule: () ==> ()
CreateSchedule() ==
(
    dcl step: nat := 1;
    while EmployeeAndJobExists(employeeCatalogue,jobCatalogue) 
    do 
    (
        
        dcl employee: Employee := FindNextEmployee();
        dcl job : Job := FindMatchingJob(employee,jobCatalogue);
        dcl jobTimeUnits: nat := job.GetTimeUnit();
        job.SetTimeUnits(employee.GetTimeUnitsAvailable());        
        jobCatalogue := {sjob | sjob in set jobCatalogue & job.GetTimeUnit() > 0};
        employee.SetTimeUnits(employee.GetTimeUnitsAvailable() - jobTimeUnits);
        employeeCatalogue := {semployee | semployee in set employeeCatalogue & employee.GetTimeUnitsAvailable() > 0};
        scheduleGLobal := scheduleGLobal munion {step |-> {employee |-> job}};
        step := step +1;
    );
);

public ScheduleSatisfied: () ==> seq of char
ScheduleSatisfied() ==
(
    

    if exists job in set jobCatalogue & job.GetTimeUnit() > 0 then return "Not satisfied" else return "Satisfied";
);

public FindMatchingJob: Employee * set of Job ==> Job
FindMatchingJob(employee,jobs) ==
(
    dcl employeeSkills: map seq of char to nat := employee.GetSkills();
    let j in set jobs be st (j.GetSkill() in set dom employeeSkills) and (MatchingSkillLevelExists(employeeSkills,j))
    in
    return j
    -- 
);

public FindNextEmployee: () ==> Employee
FindNextEmployee() ==
(

    let employee in set employeeCatalogue be st EmployeeAndJobExists(employeeCatalogue,jobCatalogue) in return employee;
);



public AddJob: Job ==> ()
AddJob(pJob) ==
(
    jobCatalogue := jobCatalogue union {pJob};
)
pre pJob.GetId() not in set {job.GetId() | job in set jobCatalogue};

public AddEmployee: Employee ==> ()
AddEmployee(pEmployeee) ==
(
    employeeCatalogue := employeeCatalogue union {pEmployeee};
)
pre pEmployeee.GetId() not in set {employee.GetId() | employee in set employeeCatalogue};

public RemoveEmployee: Employee ==> ()
RemoveEmployee(pEmployeee) ==
(
    employeeCatalogue := employeeCatalogue \ {pEmployeee};
)
pre pEmployeee.GetId() in set {employee.GetId() | employee in set employeeCatalogue};

pure public GetJobCatalogue: () ==> set of Job
GetJobCatalogue() ==
return jobCatalogue;    

pure public GetEmployeeCatalogue: () ==> set of Employee
GetEmployeeCatalogue() ==
return employeeCatalogue;    

pure public GetSchedule:() ==> map nat to (map Employee to Job)
GetSchedule() ==
return scheduleGLobal;
 



functions
public JobExists: nat * set of Job -> bool
JobExists(id,jobCatalogue) ==
exists j in set jobCatalogue & j.GetId() = id;

public EmployeeAndJobExists: set of Employee * set of Job-> bool
EmployeeAndJobExists(employeeCatalogue, jobCatalogue) ==(  
     (exists j in set jobCatalogue & exists e in set employeeCatalogue &
        MatchingSkillLevelExists(e.GetSkills(),j)) 
        and (exists e in set employeeCatalogue & MatchingJobExists(e,jobCatalogue) )
    
);


public MatchingJobExists: Employee * set of Job -> bool
MatchingJobExists(employee, jobs) ==
    (exists job in set jobs & job.GetSkill() in set dom employee.GetSkills());
    
public MatchingSkillLevelExists: map seq of char to nat * Job -> bool
MatchingSkillLevelExists(employeeSkills,job) ==
    (exists skill in set dom employeeSkills & employeeSkills(skill) >= job.GetSkillLevel());

end Scheduler */