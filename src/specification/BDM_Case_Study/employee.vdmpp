class Employee

types

values
    


instance variables
    originaltimeunits : nat;
    id: nat;
    timeUnitsAvailable: nat;
    skills: map seq of char to nat;


    
operations
public Employee: nat *nat ==> Employee
Employee(pId,pTimeUnits) ==
(
    id := pId;
    timeUnitsAvailable:=pTimeUnits;
    originaltimeunits:=pTimeUnits;
    skills := {|->};
);

public step: nat ==> ()
step(ptimeunits) == 
(if timeUnitsAvailable - ptimeunits >= 0
then 
    timeUnitsAvailable := timeUnitsAvailable - ptimeunits
else
    timeUnitsAvailable := 0);

public refresh: () ==> ()
refresh() == 
timeUnitsAvailable := originaltimeunits;

public AddSkill: seq of char * nat ==> ()
AddSkill(pSkill,pLevel) ==
skills:= skills ++ {pSkill |-> pLevel};

public SetTimeUnits: nat ==> ()
SetTimeUnits(newTime) == 
timeUnitsAvailable := newTime;

pure public GetTimeUnitsAvailable: () ==> nat
GetTimeUnitsAvailable() ==
return timeUnitsAvailable;    

pure public GetSkills: () ==> map seq of char to nat
GetSkills() ==
return skills;    

pure public GetId: () ==> nat
GetId() ==
return id;    


functions
    


end Employee